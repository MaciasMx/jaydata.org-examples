@model JayDataExamples.App_Code.Example
@{ Layout = "~/Views/Shared/Layout_Default.cshtml";}

@section CodeSource {
    <textarea class="code">
Same code as the Mobile simple example but filtering, projection and sorting
applied to the datasources.

<script>
    categoriesDataSource: remoteDB.Categories
        .map(function (c) {
            return {
                Category_ID: c.Category_ID,
                Category_Name: c.Category_Name
            };
        }, {}, "default")
        .asKendoDataSource()
    productsDataSource: remoteDB.Products
        .filter('it.Units_In_Stock > 0')
        .orderByDescending('it.Unit_Price')
        .asKendoDataSource()
</script>
    </textarea>
}

@section CodeRunning {
    <div class="k-content mobileExample ">
        <div id="device-wrapper">
            <div id="mobile-application-container">
                <div data-role="view" id="categories" data-layout="default" data-model="viewModel" data-title="Categories">
                    <ul id="listView"
                        data-role="listview"
                        data-style="inset"
                        data-template="categorylist-template"
                        data-bind="source: categoriesDataSource, events: { click: selectCategory }">
                    </ul>
                </div>
                <div data-role="view" id="products" data-layout="default" data-model="viewModel" data-title="Products">
                    <header data-role="header">
                        <div data-role="navbar">
                            <a data-align="left" data-role="backbutton">Back</a>
                        </div>
                    </header>
                    <ul id="listView"
                        data-role="listview"
                        data-style="inset"
                        data-template="productlist-template"
                        data-bind="source: productsDataSource, events: { click: selectProduct }">
                    </ul>
                </div>
                <div data-role="view" id="product" data-layout="default" data-model="viewModel" data-title="Product">
                    <header data-role="header">
                        <div data-role="navbar">
                            <a data-align="left" data-role="backbutton">Back</a>
                            <a data-align="right" data-role="button" href="#products" data-bind="click: remove">Delete</a>
                        </div>
                    </header>
                    <ul data-role="listview" data-style="inset">
                        <li>Name <span class="value" data-bind="text: product.Product_Name"></span></li>
                        <li>Price <span class="value" data-bind="text: product.Unit_Price"></span></li>
                        <li>In Stock <span class="value" data-bind="text: product.Units_In_Stock"></span></li>
                        <li>On Order <span class="value" data-bind="text: product.Units_On_Order"></span></li>
                    </ul>
                </div>
                <script id="categorylist-template" type="text/x-kendo-template">
        <a href="##products" data-bind="text:Category_Name"></a>
                </script>
                <script id="productlist-template" type="text/x-kendo-template">
        <a href="##product" data-bind="text:Product_Name"></a>
                </script>

            </div>
        </div>
    </div>

    <script>
        $.when(getRemoteNorthwind()).then(function (remoteDB) {

            viewModel = kendo.observable({
                categoriesDataSource: remoteDB.Categories
                    .map(function (c) { return { Category_ID: c.Category_ID, Category_Name: c.Category_Name }; }, {}, "default")
                    .asKendoDataSource(),
                productsDataSource: remoteDB.Products
                    .filter('it.Units_In_Stock > 0')
                    .orderByDescending('it.Unit_Price')
                    .asKendoDataSource(),

                product: null,

                selectCategory: function (e) {
                    viewModel.productsDataSource.filter({ field: 'Category_ID', operator: 'eq', value: e.dataItem.Category_ID });
                },
                selectProduct: function (e) {
                    viewModel.set('product', null);
                    viewModel.set('product', e.dataItem);
                },
                remove: function () {
                    viewModel.productsDataSource.remove(viewModel.product);
                    viewModel.productsDataSource.sync();
                }
            });
            applyCurrentMobileOS("#mobile-application-container");
            if (!$.browser.msie && !$.browser.opera) {
                app = new kendo.mobile.Application($("#mobile-application-container"),
                {
                    layout: "examples",
                    platform: kendoMobileOS,
                    updateDocumentTitle: false
                });
            }
        });
    </script>
}
