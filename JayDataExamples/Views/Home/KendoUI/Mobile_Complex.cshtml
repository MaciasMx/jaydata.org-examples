@model JayDataExamples.App_Code.Example
@{ Layout = "~/Views/Shared/Layout_Default.cshtml";}

@section CodeRunning {
    <div class="k-content mobileExample ">
        <div id="device-wrapper">
            <div id="mobile-application-container">

                <!-- task list view -->
                <div data-role="view" id="taskList" data-model="viewModel" data-title="Tasks">
                    <header data-role="header">
                        <div data-role="navbar">
                            <span data-role="view-title"></span>
                            <a data-align="left" data-role="button" data-rel="actionsheet" href="#categoryAction">Tools</a>
                            <a data-align="right" data-role="button" href="#taskEditor" data-bind="click: newTask" data-icon="add">New</a>
                        </div>
                    </header>
                    <footer data-role="footer">
                        <div data-role="tabstrip">
                            <a href="#taskList" data-icon="recents">Tasks</a>
                            <a data-bind="visible: appSettings.UseCategories" href="#categoryList" data-icon="bookmarks">Categories</a>
                            <a href="#settings" data-icon="settings">Settings</a>
                        </div>
                    </footer>

                    <ul id="buttongroup" data-align="right" data-index="0"
                        data-bind="events: { select: changeTaskFilter }" data-role="buttongroup">
                        <li>All tasks</li>
                        <li>Active</li>
                        <li>Completed</li>
                    </ul>

                    <ul data-style="inset" data-role="listview" data-bind="visible: showCategoryControls">
                        <li style="color: gray">Category filter:
                <span class="filter-tag"
                    data-bind="click: removeCategoryFilter"
                    style="border-radius">
                    <span data-bind="visible: category, text: category.Name"></span>
                    <a data-role="detailbutton" data-bind="click: clearCategoryFilter"
                        data-style="rowdelete"></a>
                </span>
                        </li>
                    </ul>

                    <ul id="listView"
                        data-role="listview"
                        data-style="inset"
                        data-template="taskListItem"
                        data-bind="source: tasks, events: { click: selectTask }">
                    </ul>

                    <script id="taskListItem" type="text/x-kendo-template">
            <a href="##taskEditor" class="km-listview-link" data-role="listview-link">
                <span data-bind="{style: { color: resolveTaskColor }}">${Todo}</span>
                <div data-bind="visible: appSettings.UseCategories">
                    <div style="font-size:8pt" data-bind="invisible:category, text: resolveCategoryName"></div>
                </div>
            </a>
            
            <input type="checkbox" 
                   data-role="switch" data-off-label="Active" 
                   data-on-label="Done" data-bind="checked: Completed, events: { change: save }" />
                    </script>

                    <ul data-style="inset" data-role="listview" data-bind="visible: appSettings.ShowNewItemInList">
                        <li style="color: gray">Add new task
                    <a data-role="detailbutton" href="#taskEditor" data-bind="click: newTask"
                        data-style="rowinsert"></a>
                        </li>
                    </ul>

                    <ul data-role="actionsheet" id="categoryAction" data-popup='{"direction": "left"}'>
                        <li class="km-actionsheet-title">Actions:</li>
                        <li><a href="#" data-action="viewModel.removeAllTasksOnScreen">Remove tasks on screen</a></li>
                        <li><a href="#" data-bind="visible: showCategoryControls" data-action="viewModel.navigateToCategoryEditor">Rename</a></li>
                        <li><a href="#" data-bind="visible: showCategoryControls" data-action="viewModel.removeCategory">Remove category</a></li>
                    </ul>
                </div>

                <!-- task editor view -->
                <div data-role="view" id="taskEditor" data-model="viewModel" data-title="Edit Task">
                    <header data-role="header">
                        <div data-role="navbar">
                            <a data-align="left" data-bind="visible: task.isNew" data-role="backbutton">Back</a>
                            <a data-align="left" data-bind="invisible: task.isNew, click: saveTask" data-role="button">Back</a>
                            <span data-role="view-title"></span>
                            <a data-align="right" data-role="button" href="#:back" data-bind="invisible: task.isNew, click: removeTask">Remove</a>
                            <a data-align="right" data-role="button" data-bind="visible: task.isNew, click: saveTask">Save</a>
                        </div>
                    </header>

                    <form id="categoryFrom" data-bind="submit: saveTask">
                        <h1 data-bind="text: task.Todo"></h1>
                        <ul data-role="listview" data-style="inset">
                            <li>Todo:<input data-bind="value: task.Todo" placeholder="What to do?" required type="text" /></li>
                            <li data-bind="visible: appSettings.UseCategories">
                                <a href="#categoryPicker" data-role="listview-link"
                                    data-bind="text: resolveCategoryName" class="km-listview-link"></a>
                            </li>
                            <li>Urgent:
                                            <input type="checkbox" data-bind="checked: task.Urgent" data-role="switch" /></li>
                            <li>Completed:
                                            <input type="checkbox" data-bind="checked: task.Completed" data-role="switch" /></li>
                        </ul>
                    </form>
                </div>

                <!-- category picker -->
                <div data-role="view" id="categoryPicker" data-model="viewModel" data-title="Pick category">
                    <header data-role="header">
                        <div data-role="navbar">
                            <a data-align="left" data-role="backbutton">Back</a>
                        </div>
                    </header>
                    <h1>Pick a Category:</h1>
                    <ul id="listView"
                        data-role="listview"
                        data-style="inset"
                        data-template="pickCategoryItem"
                        data-bind="source: categories, events: { click: setCategory }">
                    </ul>
                    <script id="pickCategoryItem" type="text/x-kendo-template">
            <a href="\#:back">${Name}</a>
                    </script>
                </div>

                <!-- category list view -->
                <div data-role="view" id="categoryList" data-model="viewModel" data-title="Categories">
                    <header data-role="header">
                        <div data-role="navbar">
                            <span data-role="view-title"></span>
                            <a data-align="right" data-icon="add" data-role="button"
                                href="#categoryEditor" data-bind="click: newCategory">New</a>
                        </div>
                    </header>

                    <footer data-role="footer">
                        <div data-role="tabstrip">
                            <a href="#taskList" data-icon="recents">Tasks</a>
                            <a data-bind="visible: appSettings.UseCategories" href="#categoryList" data-icon="bookmarks">Categories</a>
                            <a href="#settings" data-icon="settings">Settings</a>
                        </div>
                    </footer>

                    <ul id="listView"
                        data-role="listview"
                        data-style="inset"
                        data-template="categoryListItem"
                        data-bind="source: categories, events: { click: selectCategory }">
                    </ul>

                    <script id="categoryListItem" type="text/x-kendo-template">
            <a href="##taskList">${Name} 
                #if (TotalCount) { # 
                    (#:TotalCount#)
                # } #
            </a>
                    </script>
                </div>

                <!-- category editor -->
                <div data-role="view" id="categoryEditor" data-model="viewModel" data-title="Edit category">
                    <header data-role="header">
                        <div data-role="navbar">
                            <a data-align="left" data-role="backbutton">Back</a>
                            <a data-align="right" data-role="button" data-bind="click: saveCategory">Save</a>
                        </div>
                    </header>

                    <form id="categoryFrom" data-bind="submit: saveCategory">
                        <ul data-role="listview" data-style="inset">
                            <li>Name:
                                            <input data-bind="value: category.Name" placeholder="Category name" required type="text" /></li>
                        </ul>
                    </form>
                </div>

                <!-- settings -->
                <div data-role="view" id="settings" data-model="viewModel" data-title="Settings">
                    <header data-role="header">
                        <div data-role="navbar">
                            <span data-role="view-title"></span>
                            <a data-align="left" data-role="backbutton">Back</a>
                        </div>
                    </header>
                    <footer data-role="footer">
                        <div data-role="tabstrip">
                            <a href="#taskList" data-icon="recents">Tasks</a>
                            <a data-bind="visible: appSettings.UseCategories" href="#categoryList" data-icon="bookmarks">Categories</a>
                            <a href="#settings" data-icon="settings">Settings</a>
                        </div>
                    </footer>

                    <ul data-role="listview" data-style="inset">
                        <li>Use Categories:
                                        <input type="checkbox" data-role="switch" data-bind="checked: appSettings.UseCategories" /></li>
                        <li>"Add New" in list view:
                                        <input type="checkbox" data-role="switch" data-bind="checked: appSettings.ShowNewItemInList" /></li>
                    </ul>
                </div>

            </div>
        </div>
    </div>
    <script>

        var Category = $data.define("Category", {
            Name: String
        });

        var Task = $data.define("Task", {
            Todo: String,
            Urgent: Boolean,
            Completed: { type: Boolean, required: true },
            Category_Id: Number
        });

        var AppSettings = $data.define("AppSettings", {
            UseCategories: Boolean,
            ShowNewItemInList: Boolean
        });

        var TodoDB = $data.EntityContext.extend('TodoDB', {
            Categories: { type: $data.EntitySet, elementType: Category },
            Tasks: { type: $data.EntitySet, elementType: Task },
            AppSettings: { type: $data.EntitySet, elementType: AppSettings },


            getAppSettings: function (appSettingReady) {
                var that = this;
                function returnEntity(entity) {
                    appSettingReady(entity.asKendoObservable({ autoSave: true }));
                }

                function createAppSettings() {
                    AppSettings.save({ Id: 1, UseCategories: false, ShowNewItemInList: true }).then(returnEntity);
                };

                return that.AppSettings
                    .single("it.Id == 1")
                    .fail(createAppSettings)
                    .then(returnEntity)
            }
        });

        todoDB = new TodoDB({ name: 'local', databaseName: 'TodoDatabase' });

        var viewModel = {};

        todoDB.onReady().then(function () {

            $data("Category", todoDB).addMember("TotalCount", {
                type: Number,
                notmapped: true
            });

            viewModel = kendo.observable({
                app: null,
                categories: todoDB.Categories.asKendoDataSource(),
                tasks: todoDB.Tasks.asKendoDataSource(),
                category: null,
                task: null,
                taskStatusFilter: 0,
                appSettings: null,


                newTask: function () {
                    //since isNew is not bindable first we need reset the selected task
                    //viewModel.set('task', undefined);

                    viewModel.set('task', viewModel.tasks.createItem());
                    if (viewModel.category) {
                        viewModel.task.set("Category_Id", viewModel.category.Id);
                    }
                },

                saveTask: function () {
                    var task = viewModel.task, tasks = viewModel.tasks;

                    if (task.isNew()) {
                        tasks.add(viewModel.task);
                    }
                    tasks.sync();
                    //this is to support form-submit originated invocation
                    viewModel.app.navigate("#:back");
                },

                selectTask: function (e) {
                    //since isNew is not bindable first we need reset the selected task
                    viewModel.set('task', undefined);
                    viewModel.set('task', e.dataItem);
                },

                removeTask: function (e) {
                    viewModel.tasks.remove(viewModel.task);
                    viewModel.tasks.sync();
                },

                changeTaskFilter: function (e) {
                    console.log(arguments);
                    viewModel.set("taskStatusFilter", e.sender.selectedIndex);
                },

                resolveTaskColor: function (e) {
                    return e.Urgent ? "red" : "black"
                },

                resolveCategoryName: function (e) {
                    var task = e instanceof kendo.data.Model ? e : e.task, catId, category;
                    if (task && (catId = task.get("Category_Id")) &&
                        (category = viewModel.categories.get(catId))) {
                        return category.Name;
                    }

                    return catId || "Uncategorized";
                },

                clearCategoryFilter: function () {
                    viewModel.set("category", null);
                },

                navigateToCategoryEditor: function () {
                    viewModel.app.navigate("#categoryEditor");
                },

                setCategory: function (e) {
                    viewModel.task.set("Category_Id", e.dataItem.Id);
                },


                removeAllTasksOnScreen: function () {
                    while (viewModel.tasks.data().length > 0) {
                        viewModel.tasks.remove(viewModel.tasks.view()[0]);
                    }
                    viewModel.tasks.sync();
                },


                applyTaskFilter: function () {
                    var filter = [];

                    if (viewModel.taskStatusFilter != 0) {
                        filter.push({
                            field: 'Completed',
                            operator: "eq",
                            value: viewModel.taskStatusFilter == 2
                        });
                    }

                    if (viewModel.category) {
                        filter.push({
                            field: 'Category_Id',
                            operator: 'eq',
                            value: viewModel.category.Id
                        });
                    }
                    console.log("apply filter", filter, viewModel.get("taskStatusFilter"));
                    viewModel.tasks.filter(filter);
                },

                newCategory: function () {
                    viewModel.set('category', viewModel.categories.createItem());
                },

                saveCategory: function () {
                    if (viewModel.category.isNew()) {
                        viewModel.categories.add(viewModel.category);
                    }
                    viewModel.categories.sync();
                    viewModel.categories.bind("sync", function () {
                        viewModel.categories.fetch()
                    }, true);
                    //this is to support form-submit invocation
                    viewModel.app.navigate("#:back");
                },

                selectCategory: function (e) {
                    viewModel.set("category", e.dataItem);
                },

                removeCategory: function () {
                    viewModel.removeAllTasksOnScreen();
                    viewModel.categories.remove(viewModel.category);
                    viewModel.categories.sync();
                    viewModel.set("category", null);
                },

                showCategoryControls: function () {
                    return this.get("appSettings.UseCategories") && this.get("category");
                }


            });

            var filterFields = ["category", "taskStatusFilter"];

            viewModel.bind("change", function (e) {
                if (filterFields.indexOf(e.field) > -1) {
                    console.log("filter field changed", e);
                    viewModel.applyTaskFilter();
                }
            });

            viewModel.tasks.bind("sync", function () {
                Array.prototype.forEach.call(viewModel.categories.data(), function (category) {
                    todoDB.Tasks
                          .filter("it.Category_Id == catid && it.Completed == false", { catid: category.Id })
                          .length(function (count) {
                              category.set("TotalCount", count);
                          });
                });
            });


            viewModel.categories.fetch(function () {
                todoDB.getAppSettings(function (appSettingsObject) {
                    viewModel.set("appSettings", appSettingsObject);

                    applyCurrentMobileOS("#mobile-application-container");
                    if (!$.browser.msie && !$.browser.opera) {
                        app = new kendo.mobile.Application($("#mobile-application-container"),
                        {
                            layout: "examples",
                            platform: kendoMobileOS,
                            updateDocumentTitle: false
                        });
                        $(".span5").css("opacity", 1);
                    }
                    viewModel.app = app;
                });
            })

        });
    </script>
}
