@model JayDataExamples.App_Code.Example
@{ Layout = "~/Views/Shared/Layout_KendoUI.cshtml";
   ViewBag.Title = "MVVM";
   }

@section Meta {
    <meta name="keywords" content="JayData, HTML5, Javascript, JayData providers, WebSQL, IndexedDB, example" />
    <meta name="description" content="How to use the JayData with Kendo! See this simple listview example." />
}

@section Includes {
    <script type="text/javascript" src="~/Scripts/vendor/north.js"></script>
    <script type="text/javascript" src="http://jaydata-cdn.s3.amazonaws.com/datajs-1.0.3-patched.js"></script>
    <link href="../Styles/dd.css" rel="stylesheet" />
}
@section SupportedBrowsers {
    @{Html.RenderPartial("_IncludeSupportedBrowsers");}
}
@section SimilarContents {
    @{Html.RenderPartial("_IncludeRelatedContents");}
}
@section SourceCode {
    @{Html.RenderPartial("_IncludeDownloadableSource");}
}

@section Tags {
    @{Html.RenderPartial("_IncludeTags");}
}

@section Description {
    <p class="main-desc">
        This Kendo mvvm example is a copy of the <a href="http://demos.kendoui.com/web/mvvm/remote-binding.html">original KendoUI example</a>
        but it uses a local Northwind database.<br />
        The demo is written so that your local database is reinitialized on every page reload and your changes are lost!
    </p>
}

@section CodeSource {
    <textarea id="code">
<script>
    var viewModel = kendo.observable({
        productsSource: localDB.Products.asKendoDataSource({ pageSize: 100 }),
        selectedProduct: null,
        hasChanges: false,
        save: function () {
            this.productsSource.sync();
            this.set("hasChanges", false);
        },
        remove: function () {
            if (confirm("Are you sure you want to delete this product?")) {
                this.productsSource.remove(this.selectedProduct);
                this.set("selectedProduct", this.productsSource.view()[0]);
                this.change();
            }
        },
        showForm: function () {
            return this.get("selectedProduct") !== null;
        },
        change: function () {
            this.set("hasChanges", true);
        }
    });

    kendo.bind($("#form-container"), viewModel);
</script>
    </textarea>

    <script>
        setTimeout(function () {
            CodeMirror.fromTextArea(document.getElementById('code'), {
                mode: 'text/html',
                lineNumbers: false
            });
        });
    </script>
}

@section CodeRunning {
    <div id="form-container" class="padding10">
        <div class="selector">
            Select Product:
                        <select data-role="dropdownlist" data-value-field="Product_ID" data-text-field="Product_Name"
                            data-bind="source: productsSource, value: selectedProduct">
                        </select>

            <button data-bind="click: save, enabled: hasChanges">Publish All Changes</button>
        </div>
        <div class="form" data-bind="visible: showForm">
            <ul>
                <li>
                    <label>ID</label>
                    <span data-bind="text: selectedProduct.ProductID, events: { change: change }"></span></li>
                <li>
                    <label>Name</label>
                    <input type="text" class="k-textbox" id="products" data-bind="value: selectedProduct.Product_Name, events: { change: change }" /></li>
                <li>
                    <label>UnitPrice</label>
                    <input type="text" data-role="numerictextbox" data-bind="value: selectedProduct.Unit_Price, events: { change: change }" /></li>
            </ul>

            <button data-bind="click: remove">Delete Product</button>
        </div>
    </div>
    <script>

        $.when($.ready, getLocalNorthwind())
        .then(function (x, localDB) {
            var viewModel = kendo.observable({
                productsSource: localDB.Products.asKendoDataSource({ pageSize: 100 }),
                selectedProduct: null,
                hasChanges: false,
                save: function () {
                    this.productsSource.sync();
                    this.set("hasChanges", false);
                },
                remove: function () {
                    if (confirm("Are you sure you want to delete this product?")) {
                        this.productsSource.remove(this.selectedProduct);
                        this.set("selectedProduct", this.productsSource.view()[0]);
                        this.change();
                    }
                },
                showForm: function () {
                    return this.get("selectedProduct") !== null;
                },
                change: function () {
                    this.set("hasChanges", true);
                }
            });

            kendo.bind($("#form-container"), viewModel);
        });
    </script>
}
